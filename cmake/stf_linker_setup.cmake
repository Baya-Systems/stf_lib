include_guard(GLOBAL)

if(FULL_LTO)
    SET(LTO_FLAGS -flto)
else()
    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        SET(LTO_FLAGS -flto=thin)
    else()
        SET(LTO_FLAGS -flto)
    endif()
endif()

SET(STF_LINK_FLAGS )

# Don't need to change default linker on OS X
if (NOT CMAKE_CXX_COMPILER_ID MATCHES "AppleClang")
    find_program(GOLD "ld.gold")
    find_program(LLD "ld.lld")

    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        if(LLD)
            SET(STF_LINK_FLAGS ${STF_LINK_FLAGS} -fuse-ld=lld)
        elseif(GOLD)
            SET(STF_LINK_FLAGS ${STF_LINK_FLAGS} -fuse-ld=gold)
        else()
            message(FATAL_ERROR "Either ld.lld or ld.gold are required when compiling with clang")
        endif()
    else()
        if(GOLD)
            SET(STF_LINK_FLAGS ${STF_LINK_FLAGS} -fuse-ld=gold)
        else()
            message(FATAL_ERROR "ld.gold is required when compiling with gcc")
        endif()
    endif()
endif()

if (CMAKE_BUILD_TYPE MATCHES "^[Dd]ebug")
    SET(STF_LINK_FLAGS ${STF_LINK_FLAGS} -O0 -g -pipe -fno-omit-frame-pointer)
    add_compile_options(-O0 -g -pipe -fno-omit-frame-pointer)
    SET(NO_STF_LTO 1)
elseif (CMAKE_BUILD_TYPE MATCHES "^[Ff]ast[Dd]ebug")
    SET(STF_LINK_FLAGS ${STF_LINK_FLAGS} -O3 -g -pipe -fno-omit-frame-pointer)
    SET(NO_STF_LTO 1)
else()
    SET(STF_LINK_FLAGS ${STF_LINK_FLAGS} -O3 -pipe)
    add_compile_options(-O3 -pipe)
    if (CMAKE_BUILD_TYPE MATCHES "^[Pp]rofile")
        SET(STF_LINK_FLAGS ${STF_LINK_FLAGS} -g -fno-omit-frame-pointer)
        add_compile_options(-g -fno-omit-frame-pointer)
        if(STF_ENABLE_GPROF)
            SET(STF_LINK_FLAGS ${STF_LINK_FLAGS} -pg)
            add_compile_options(-pg)
        endif()
    else()
        SET(STF_LINK_FLAGS ${STF_LINK_FLAGS} -fomit-frame-pointer)
        add_compile_options(-fomit-frame-pointer)
    endif()
endif()

if(NOT NO_STF_LTO)
    add_compile_options(${LTO_FLAGS})
    SET(STF_LINK_FLAGS ${STF_LINK_FLAGS} ${LTO_FLAGS})

    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
      if (CMAKE_CXX_COMPILER_ID MATCHES "AppleClang")
        SET(CMAKE_AR "ar")
      else()
        unset(LLVM_AR)
        unset(LLVM_AR CACHE)
        # using regular Clang or AppleClang
        find_program(LLVM_AR "llvm-ar")
        if (NOT LLVM_AR)
          unset(LLVM_AR)
          unset(LLVM_AR CACHE)
          find_program(LLVM_AR "llvm-ar-9")
          if (NOT LLVM_AR)
            message(FATAL_ERROR "llvm-ar is needed to link trace_tools on this system")
          else()
            SET(CMAKE_AR "llvm-ar-9")
          endif()
        else()
          SET(CMAKE_AR "llvm-ar")
        endif()
      endif()
    else ()
      SET(CMAKE_AR  "gcc-ar")
    endif()
endif()

add_link_options(${STF_LINK_FLAGS})

SET(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> qcs <TARGET> <LINK_FLAGS> <OBJECTS>")
SET(CMAKE_CXX_ARCHIVE_FINISH   true)
